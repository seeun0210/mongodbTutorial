# Query Selectors & Projection Operators

MongoDB에서 **쿼리 선택자**와 **투영 연산자**는 데이터를 검색하고 결과를 반환하는 방법을 제어하는 데 사용되는 두 가지 주요 도구입니다. 이 두 도구는 각기 다른 역할을 수행하며, MongoDB 쿼리 작성 시 이를 정확히 이해하는 것이 중요합니다.

## Query Selectors (쿼리 선택자)

쿼리 선택자는 특정 조건에 맞는 데이터를 찾기 위해 사용됩니다. 이들은 문서의 필드 값이 특정 조건을 충족하는지를 평가하여 해당 문서가 결과에 포함될지 여부를 결정합니다. 예를 들어, 특정 나이 이상의 사용자를 찾거나, 특정 도시에 사는 사용자를 검색할 때 사용합니다.

## Projection Operators (투영 연산자)

투영 연산자는 쿼리 결과로 반환되는 문서의 필드를 제어합니다. 즉, 어떤 필드를 포함하거나 제외할지를 결정할 때 사용됩니다. 예를 들어, 사용자의 이름과 이메일만 반환하고 다른 정보는 제외하고 싶을 때 투영 연산자를 사용할 수 있습니다.

## Query Selectors

### 1. Comparison (비교)

- **비교 선택자**는 필드의 값을 특정 값과 비교합니다. 예를 들어 `$gt`, `$lt`, `$eq` 등이 있습니다.

#### MongoDB Example

```javascript
// 나이가 25보다 큰 모든 문서 찾기
db.users.find({ age: { $gt: 25 } })
```

#### Mongoose Example

```javascript
// 나이가 25보다 큰 모든 사용자 찾기
User.find({ age: { $gt: 25 } })
```

### 2. Logical (논리)

- **논리 선택자**는 여러 조건을 조합합니다 (`$and`, `$or`, `$not`, `$nor`).

#### MongoDB Example

```javascript
// 나이가 18 이상이면서 30 이하인 문서 찾기
db.users.find({ $and: [{ age: { $gte: 18 } }, { age: { $lte: 30 } }] })
```

#### Mongoose Example

```javascript
// 나이가 18 이상이면서 30 이하인 사용자 찾기
User.find({ $and: [{ age: { $gte: 18 } }, { age: { $lte: 30 } }] })
```

### 3. Element (요소)

- **요소 선택자**는 필드의 존재 여부나 타입을 확인합니다 (`$exists`, `$type`).

#### MongoDB Example

```javascript
// email 필드가 존재하는 모든 문서 찾기
db.users.find({ email: { $exists: true } })
```

#### Mongoose Example

```javascript
// email 필드가 존재하는 모든 사용자 찾기
User.find({ email: { $exists: true } })
```

### 4. Evaluation (평가)

- **평가 선택자**는 정규 표현식이나 JavaScript 코드를 사용해 문서를 평가합니다 (`$regex`, `$where`).

#### MongoDB Example

```javascript
// 이름이 'John'으로 시작하는 모든 문서 찾기
db.users.find({ name: { $regex: '^John' } })
```

#### Mongoose Example

```javascript
// 이름이 'John'으로 시작하는 모든 사용자 찾기
User.find({ name: { $regex: '^John' } })
```

### 5. Array (배열)

- **배열 선택자**는 배열 필드 내 요소들에 대한 복잡한 쿼리를 수행합니다 (`$all`, `$

elemMatch`).

#### MongoDB Example

```javascript
// 'hobbies' 배열에 'reading'과 'hiking'을 모두 포함하는 문서 찾기
db.users.find({ hobbies: { $all: ["reading", "hiking"] } })
```

#### Mongoose Example

```javascript
// 'hobbies' 배열에 'reading'과 'hiking'을 모두 포함하는 사용자 찾기
User.find({ hobbies: { $all: ["reading", "hiking"] } })
```

### 6. Comments

- **주석**을 통해 쿼리에 설명을 추가할 수 있습니다 (`$comment`).

#### MongoDB Example

```javascript
// 쿼리에 설명을 추가하는 예
db.users.find({ age: { $gt: 25 } }).comment("Find users older than 25")
```

#### Mongoose Example

- Mongoose에서는 `$comment`를 직접 사용하는 기능을 제공하지 않지만, 쿼리를 로깅하거나 디버깅할 때 개발자가 메모를 남길 수 있습니다.

### 7. Geospatial (지리 공간)

- **지리 공간 선택자**는 위치 기반 데이터를 쿼리하는 데 사용됩니다 (`$geoWithin`, `$near`).

#### MongoDB Example

```javascript
// 특정 위치 주변의 문서 찾기
db.places.find({
  location: {
    $near: {
      $geometry: { type: "Point", coordinates: [-73.9667, 40.78] },
      $maxDistance: 1000
    }
  }
})
```

#### Mongoose Example

```javascript
// 특정 위치 주변의 사용자 찾기
User.find({
  location: {
    $near: {
      $geometry: { type: "Point", coordinates: [-73.9667, 40.78] },
      $maxDistance: 1000
    }
  }
})
```

## Projection Operators

### 1. $ (Positional)

- **Positional 연산자**는 배열에서 쿼리 조건과 일치하는 첫 번째 요소를 반환합니다.

#### MongoDB Example

```javascript
// 첫 번째 일치하는 'hobbies' 요소만 반환
db.users.find({ hobbies: "reading" }, { "hobbies.$": 1 })
```

#### Mongoose Example

```javascript
// 첫 번째 일치하는 'hobbies' 요소만 반환
User.find({ hobbies: "reading" }, { "hobbies.$": 1 })
```

### 2. $elemMatch (Element Match)

- **Element Match 연산자**는 배열 내 요소가 복수의 조건을 충족할 때 사용합니다.

#### MongoDB Example

```javascript
// 'grades' 배열에서 조건을 만족하는 첫 번째 요소만 반환
db.students.find({ grades: { $elemMatch: { score: { $gt: 85 }, subject: "Math" } } })
```

#### Mongoose Example

```javascript
// 'grades' 배열에서 조건을 만족하는 첫 번째 요소만 반환
Student.find({ grades: { $elemMatch: { score: { $gt: 85 }, subject: "Math" } } })
```

### 3. $meta

- **Meta 연산자**는 쿼리 결과의 메타 데이터를 반환합니다 (예: 텍스트 검색의 점수).

#### MongoDB Example

```javascript
// 텍스트 검색 점수를 포함하여 반환
db.articles.find({ $text: { $search: "coffee" } }, { score: { $meta: "textScore" } })
```

#### Mongoose Example

```javascript
// 텍스트 검색 점수를 포함하여 반환
Article.find({ $text: { $search: "coffee" } }, { score: { $meta: "textScore" } })
```

### 4. $slice

- **Slice 연산자**는 배열에서 특정 범위의 요소만 반환합니다.

#### MongoDB Example

```javascript
// 'comments' 배열에서 처음 5개의 요소만 반환
db.posts.find({}, { comments: { $slice: 5 } })
```

#### Mongoose Example

```javascript
// 'comments' 배열에서 처음 5개의 요소만 반환
Post.find({}, { comments: { $slice: 5 } })
```

### $meta는 index와 관련이 있다?

`$meta` 연산자는 MongoDB의 쿼리 결과로부터 메타데이터를 추출하는 데 사용되는 특수한 투영 연산자입니다. 주로 텍스트 검색 쿼리에서 유용하게 사용되며, 텍스트 검색 쿼리에 대한 점수(`textScore`)를 반환할 수 있습니다. 이 점수는 검색 키워드와 문서의 일치 정도를 나타내며, 검색 결과의 정렬에 활용할 수 있습니다.

`$meta` 연산자가 인덱스와 관련 있는 주된 이유는, 이 연산자가 특히 텍스트 인덱스를 활용한 검색 쿼리에서 사용되기 때문입니다. MongoDB에서 텍스트 검색을 수행하려면 먼저 해당 필드에 대해 텍스트 인덱스를 생성해야 합니다. 이후, `$text` 선택자와 함께 `$search`를 사용하여 문서를 검색하고, `$meta`를 사용하여 각 문서의 `textScore`를 얻어 결과를 정렬할 수 있습니다.

### 예시: 텍스트 검색과 `$meta`

#### MongoDB 사용 예

```javascript
// articles 컬렉션에서 'coffee' 검색, 텍스트 점수와 함께 결과 반환
db.articles.createIndex({ content: "text" });  // 텍스트 인덱스 생성
db.articles.find(
  { $text: { $search: "coffee" } },
  { score: { $meta: "textScore" } }
).sort({ score: { $meta: "textScore" } });  // 점수에 따라 정렬
```

이 예시에서는 먼저 `content` 필드에 대해 텍스트 인덱스를 생성하고, 'coffee'라는 단어를 포함하는 문서를 검색합니다. 검색된 각 문서는 `textScore`를 포함하고, 이 점수를 기준으로 정렬되어 반환됩니다.

### Mongoose 사용 예

Mongoose에서도 비슷한 방식으로 `$meta`를 사용할 수 있습니다:

```javascript
// Mongoose에서 articles 모델을 사용하여 'coffee' 검색, 점수와 함께 반환
Article.find(
  { $text: { $search: "coffee" } },
  { score: { $meta: "textScore" } }
).sort({ score: { $meta: "textScore" } });  // 점수에 따라 정렬
```